// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]

  posts           Post[]
  votes           PostVote[]
  comments        Comment[]
  commentVotes    CommentVote[]
  createdSubnexus Subnexus[]     @relation("CreatedBy")
  subscription    Subscription[]
}

model Subnexus {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  creator      User           @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: NoAction)
  creatorId    String
  Subscription Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  subnexus   Subnexus @relation(fields: [subnexusId], references: [id])
  subnexusId String

  @@id([userId, subnexusId])
  @@index([userId])
  @@index([subnexusId])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String @unique
  content Json?

  subnexus   Subnexus @relation(fields: [subnexusId], references: [id])
  subnexusId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    PostVote[]

  @@index([subnexusId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes CommentVote[]

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

enum VoteType {
  Up
  Down
}

model PostVote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
